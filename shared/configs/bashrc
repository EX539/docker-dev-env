#!/usr/bin/env bash
# Custom .bashrc configuration for Docker development environments

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Don't put duplicate lines in the history
HISTCONTROL=ignoredups:ignorespace

# Append to the history file, don't overwrite it
shopt -s histappend

# Set history length
HISTSIZE=1000
HISTFILESIZE=2000

# Check the window size after each command and update values of LINES and COLUMNS
shopt -s checkwinsize

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set a fancy prompt
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# Enable color support of ls
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Some useful aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'

# Development environment aliases
alias g='git'
alias d='docker'
alias dc='docker-compose'

# Set editor
export EDITOR=vim
export VISUAL=vim

# Path additions
export PATH="$HOME/.local/bin:$PATH"

# Function to create and cd into a directory in one command
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Function to extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz) tar xzf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) unrar e "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xf "$1" ;;
        *.tbz2) tar xjf "$1" ;;
        *.tgz) tar xzf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Load custom configuration if available
if [ -f "$HOME/.bash_custom" ]; then
    . "$HOME/.bash_custom"
fi

# Display system information on login
if [ -f /etc/os-release ]; then
    . /etc/os-release
    echo "Welcome to $PRETTY_NAME development environment"
elif [ -f /etc/alpine-release ]; then
    echo "Welcome to Alpine Linux development environment"
else
    echo "Welcome to the development environment"
fi

echo "Type 'cd /workspace' to access your mounted workspace"
